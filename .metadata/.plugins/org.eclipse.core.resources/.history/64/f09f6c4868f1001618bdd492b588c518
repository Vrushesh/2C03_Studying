
public class BinarySearchST <Key extends Comparable<Key>, Value>{
	
	private Key[] keys; 
	private Value[] vals;
	private int n;
	
	public BinarySearchST(int cap){
		keys = (Key[]) new Comparable[cap];
		vals = (Value[]) new Object[cap];
	}
	
	public int size(){
		return n;
	}
	
	public Value get(Key key){
		if (isEmpty()){ 
			return null;
		}
		int i = rank(key);
		if(i < n && keys[i].compareTo(key) == 0){
			return vals[i];
		}else{
			return null;
		}
	}

	private boolean isEmpty() {
		return n == 0;
	}

	private int rank(Key key) {
		int lo = 0;
		int hi = n - 1;
		while (lo <= hi){
			int mid = lo + (hi - lo)/2;
			int cmp = key.compareTo(keys[mid]);
			if (cmp < 0) {
				hi = mid - 1;
			}else if (cmp > 0){	
				lo = mid + 1;
			}else{
				return mid;
			}
		}
		return lo;
	}
}
